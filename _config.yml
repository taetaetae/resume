# Site
repository: taetaetae/resume
# favicon: Directory of your favicon (eg. images/favicon.ico)(optional)

# Content configuration version
version: 2

update_date: 2025.04.16

# Personal info
name: 권태관
title: Software development engineer
email: taetaetae_@naver.com
# email_title: Email (Email title override)
# phone: Your phone number (optional)
# phone_title: Phone (Phone title override)
website: https://taetaetae.github.io
# website_title: Web (Website title override)

# Dark Mode (true/false/never)
darkmode: false

# Social links
#twitter_username: jekyllrb
github_username:  taetaetae
#stackoverflow_username: "00000001"
#dribbble_username: jekyll
facebook_username: taetaetae0
#flickr_username: jekyll
instagram_username: _taetaetae
linkedin_username: taetaetae
#xing_username: jekyll
#pinterest_username: jekyll
#youtube_username: jekyll
#googleplus_username: +jekyll
#orcid_username: 0000-0000-0000-0000

# Additional icon links
additional_links:
- title: careerly
  icon: fab fa-medapps
  url: https://careerly.co.kr/@taetaetae
# - title: another link
#   icon: font awesome brand icon name (eg. fab fa-twitter) (https://fontawesome.com/icons?d=gallery&s=brands&m=free)
#   url: Link url (eg. https://google.com)

# Google Analytics and Tag Manager
# Using more than one of these may cause issues with reporting
# gtm: "GTM-0000000"
# gtag: "UA-00000000-0"
google_analytics: "UA-86432198-1"

# About Section
about_title: About <mark>taetaetae</mark>
about_profile_image: images/profile.png
about_content: | # this will include new lines to allow paragraphs
  12년 차 백엔드 개발자로서, 1,000만 명 이상의 회원을 관리하고 대용량 데이터를 처리하며, 국내 및 글로벌 서비스를 포함한 대규모 트래픽을 처리하는 웹 서비스 운영과 개발을 경험했습니다. 동시에 읽기 쉽고 유지보수 가능한 코드를 작성하고, 정리와 꼼꼼함을 바탕으로 복잡한 시스템을 구조화하여 코드의 일관성, 성능 최적화, 기술 부채 해소를 통해 개발 과정에서 발생할 수 있는 문제를 사전에 방지하고 해결하는 데 기여하고 있습니다.<br>
  개인의 성장뿐만 아니라 팀 전체가 함께 성장하는 문화를 만들어가는 데 관심이 많습니다.<br>
  현재는 조직 내 시니어 개발자로써 트러블 슈팅·성능 개선·고성능 API 설계에 집중하며 비즈니스 성장에 기여하고 있습니다.

content:
  - title: Work Experience. # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: top-left
        title: NAVER Corporation
        sub_title: Software Engineer
        caption: 2014.05 ~ 현재
        description: | # this will include new lines to allow paragraphs
          **Naver Shopping**ㆍ[*https://shopping.naver.com*](https://shopping.naver.com)ㆍ<small>(Feb 2022 – Present)</small><br>
          - Developed product APIs for a new Quick Commerce service and established layer architecture and testing code conventions within the development task force.<br>
          ㆍ Background: Ambiguous module responsibilities due to indiscriminate inter-layer calls and frequent regressions caused by a lack of test codes.<br>
          ㆍ Actions<br>
          ㅤㅤㆍRefined and formalized clear separation of responsibilities between layers, establishing team-wide development standards.<br>
          ㅤㅤㆍIntegrated ArchUnit-based fitness functions into the CI pipeline to automatically detect dependency violations.<br>
          ㅤㅤㆍAuthored unit test guidelines and provided sample codes to facilitate easy adoption among team members.<br>
          ㅤㅤㅤㆍEnhanced code quality and maintainability.<br>
          ㅤㅤㆍDemonstrated leadership by coordinating regular scrums with the product ingestion team, client (Front-End) team, and planning/design teams.<br>
          ㆍ Outcome: Successfully drove prioritization and scheduling efforts to achieve stable feature deliveries within deadlines.<br>
          <div style="height: 0.5em;"></div>
          
          - Built a real-time monitoring system to handle large-scale traffic and accelerate incident response during Fashion Town service operations.<br>
          ㆍ Background: Manual log analysis caused incident response delays of over 5 minutes.<br>
          ㆍ Actions<br>
          ㅤㅤㆍEstablished a real-time traffic monitoring system by collecting Nginx VTS and Prometheus metrics and visualizing them with Grafana dashboards.<br>
          ㅤㅤㆍApplied Nginx Rate Limit configurations (validated through dry_run) to block abnormal traffic and maintain system performance.<br>
          ㅤㅤㆍVisualized application metrics (e.g., response time, DB query speed) to detect and prioritize bottleneck resolutions.<br>
          ㆍ Outcome: Cut incident detection and response time from over 5 minutes to within 1 minute.<br>
          <div style="height: 0.5em;"></div>
          
          - Directed the development of the Product Standardization ('Group Product') service and architected the data pipeline.<br>
          ㆍ Background: Different options of the same product were separately registered, decreasing search accuracy and causing user confusion.<br>
          ㆍ Actions<br>
          ㅤㅤㆍOptimized duplicate elimination and filtering/paging performance by utilizing ElasticSearch collapse queries.<br>
          ㅤㅤㆍImplemented logic to prioritize and display a representative product within each group according to sort policies.<br>
          ㅤㅤㆍDesigned the ingestion data pipeline between MongoDB and ElasticSearch and oversaw the migration.<br>
          ㅤㅤㆍValidated system performance against TPS targets through load testing and optimized query strategies.<br>
          ㅤㅤㆍCollaborated closely with the product ingestion and QA teams to detect and resolve data quality issues.<br>
          ㆍ Outcome<br>
          ㅤㅤㆍTook ownership of task management, schedule control, and risk mitigation to ensure the project's on-time completion.<br>
          ㅤㅤㆍReduced the operational workload for product consultants.<br>
          <div style="height: 0.5em;"></div>
          
          - Formulated a failure recovery strategy and introduced Chaos Engineering to enhance service resilience.<br>
          ㆍ Background: Needed to establish recovery scenarios and simulate failure conditions before service launch.<br>
          ㆍ Actions<br>
          ㅤㅤㆍApplied Fallback Cache (Redis) to mitigate empty response issues during external delays.<br>
          ㅤㅤㆍSimulated delayed responses and network faults using Toxiproxy to verify retry and recovery mechanisms.<br>
          ㆍ Outcome<br>
          ㅤㅤㆍIdentified and corrected fallback cache switching flaws during testing, achieving 100% success rate.<br>
          ㅤㅤㆍRecorded zero critical incidents over six months post-launch, maintaining 99.99% SLA compliance.<br>
          <div style="height: 0.5em;"></div>
          
          - Architected a high-availability data pipeline to process large-scale real-time user events.<br>
          ㆍ Background: Needed to support behavior-based personalized product recommendations and real-time ranking/feed services.<br>
          ㆍ Actions<br>
          ㅤㅤㆍStreamed and processed user behavior events in real-time with Kafka and integrated them with the recommendation system.<br>
          ㅤㅤㆍMigrated from hourly batch-based rankings to near-real-time ranking calculations using Redis, enhancing data freshness.<br>
          ㆍ Outcome: Contributed to a 10% increase in page views after service launch.<br>
          <div style="height: 1em;"></div>
          
          **V Live**ㆍ[*http://www.vlive.tv*](http://www.vlive.tv/)ㆍ<small>(Aug 2018 – Feb 2022)</small><br>
          - Improved broadcast notification speed ([*Related blog*](https://taetaetae.github.io/2019/01/02/faster-parallel-processes/))<br>
          ㆍ Background: Slow notifications disrupted communication between stars and fans and reduced broadcast viewership.<br>
          ㆍ Actions<br>
          ㅤㅤㆍParticipated end-to-end in diagnosing issues, planning, designing, implementing, and deploying optimizations in three phases.<br>
          ㅤㅤㆍRefined target retrieval methods and enhanced RabbitMQ-based parallel processing.<br>
          ㅤㅤㆍReduced Redis load and increased processing throughput by implementing key partitioning to avoid duplicate sends.<br>
          ㆍ Outcome<br>
          ㅤㅤㆍBoosted broadcast notification performance for 10 million users (reduced from 11 minutes → 30 seconds), achieving 95% system improvement.<br>
          ㅤㅤㆍExpanded business models through notification services and launched the new "News Update" feature.<br>
          - Headed a major architectural transformation from Monolithic to MSA to strengthen scalability and fault tolerance.<br>
          ㆍ Adopted Event-Driven Architecture (EDA), Circuit Breakers, and service modularization to enable system resilience.<br>
          ㆍ Implemented Kubernetes-based orchestration to enhance deployment flexibility.<br>
          - Served as Head of Search and Feed, driving service stabilization and designing an event-driven architecture for the search/feed system.<br>
          - Advanced CI/CD automation and code quality through the introduction of SonarQube static analysis and online code reviews ([*Related blog*](https://taetaetae.github.io/2018/02/08/jenkins-sonar-github-integration/))<br>
          - Ensured service continuity and minimized deployment risks by implementing non-disruptive batch deployments ([*Related blog*](https://taetaetae.github.io/2019/10/13/batch-nondisruptive-deploy/))<br>
          <div style="height: 1em;"></div>
          
          **Naver Pay Card Direct Affiliation System (Payment Gateway)**ㆍ<small>(Apr 2016 – Aug 2018)</small><br>
          - Built the initial project environment including CI/CD pipelines, build/deployment systems, and server infrastructure.<br>
          - Created a business-wide monitoring system based on the Elastic Stack for automated anomaly detection ([*Related blog*](https://d2.naver.com/helloworld/3585246))<br>
          - Developed a real-time anomaly detection system to monitor and automatically respond to irregular transaction patterns ([*Related blog*](https://taetaetae.github.io/2018/05/31/anomaly-detection/))<br>
          - Strengthened the reliability of payment systems by adopting distributed tracing for transaction and performance monitoring.<br>
          <div style="height: 1em;"></div>
          
          **Naver Weather**ㆍ[*https://weather.naver.com*](https://weather.naver.com/)ㆍ<small>(May 2014 – Apr 2016)</small><br>
          - Developed a monitoring tool to validate and ensure the integrity of incoming CP (Content Provider) weather data.<br>
          - Migrated data collection processes from crontab to Spring Batch and Jenkins, visualizing and automating data workflows.<br>
          - Established a logging system for the data pipeline to detect anomalies and resolve data processing delays.<br>
          - Ideated and prototyped a map-based weather service, later incorporated into production services.<br>
  
      - layout: top-left
        title: NHN Technology Services
        sub_title: Software Engineer
        caption: 2013.05 ~ 2014.05
        description: | # this will include new lines to allow paragraphs
          **네이버 게임**ㆍ[*https://game.naver.com*](https://game.naver.com/)<br>
          - 네이버 아이디 기반 게임 채널링 서비스 운영 및 게임사별 연동 최적화
          - NHN Entertainment → NHN 으로 서비스 이관하는 과정에서 DB 마이그레이션 및 서버 이전을 안정적으로 수행
          - 불필요한 초기 로딩 제거 및 지연 로딩 적용, 서비스 메인 페이지 성능 개선(2.1초 → 1.7초), 로딩 속도 19% 단축
          
      - layout: top-left
        title: 대한민국 육군 장교 (ROTC)
        sub_title: 보병대대 통신소대장
        caption: 2009.02 ~ 2012.06
        description: | # this will include new lines to allow paragraphs
          - 대대 특별참모 역할 수행 및 통신소대 병력 운영, 교육 및 유지보수 관리
          - GOP 및 FEBA 부대 유/무선 통신망 개선
          - 수기 기록으로 인한 보안 취약점을 개선하기 위해 위병소 전자 출입관리 시스템 개발 (php)

  - title: Patent.
    layout: text # Type of content section (list/text)
    content: |
      **대량 알림 발송 방법 및 시스템**ㆍ[kipris](https://doi.org/10.8080/1020190128401)
        - V Live 서비스에서 진행한 대량 알림 발송 방법 및 시스템에 대한 특허 출원
        - 메세징 큐와 Redis를 활용하여 대량 알림 발송 속도 개선 및 네트워크 부하 감소
        - 1,000만 사용자 대상 방송 알림 속도 개선(11분 → 30초)

  - title: Other Experience. # Title for the section
    layout: list # Type of content section (list/text)
    content:
      - layout: top-left
        title: Toy Project
        description: | # this will include new lines to allow paragraphs
          **👨‍💻꿈꾸는 태태태의 공간ㆍ<a href="https://taetaetae.github.io/" target="_blank" style="color: inherit;font-style: italic;">https://taetaetae.github.io/</a>**
          - 개인 기술블로그 (2016년 9월~)
          - 새로운 기술을 습득했거나 업무간 트러블 슈팅을 기록하며 공유

          **Daily DevBlogㆍ<a href="http://daily-devblog.com/" target="_blank" style="color: inherit;font-style: italic;">http://daily-devblog.com/</a>**
          - 기술블로그 구독서비스 (2018년 7월~)
          - Python, Flask
          - 매일 오전 10시마다 어제 등록된 글, 매주 월요일 오후 2시 지난주 인기글을 정리하여 메일 발송

      - layout: top-left
        title: ETC
        description: | # this will include new lines to allow paragraphs
          **발표**
            - <a href="https://d2.naver.com/news/8012036" target="_blank" style="color: inherit;font-style: italic;">DEVIEW CAMPUS 2023 : 어서와, 성장은 처음이지?</a> - 2023.02.27
            - <a href="https://www.facebook.com/gdgcampus/posts/pfbid035btaWFiKnfymTLsH9NLBVmXu7QsLaqUEVxbKf6oPemNFfag9neDQJnd3Bdv3CSmTl" target="_blank" style="color: inherit;font-style: italic;">모두의 TOY STORY : Side Project 어디까지 가봤니?</a> - 2019.07.14
            - <a href="https://taetaetae.github.io/2019/05/19/d-light-togetherthon-2019" target="_blank" style="color: inherit;font-style: italic;">GDG D.light together-thon 2019</a> - 2019.05.11
            - <a href="https://archive.pycon.kr/2018/program/81" target="_blank" style="color: inherit;font-style: italic;">PYCON 2018 - Lightning talk : 파이썬으로 토이프로젝트 만들기</a> - 2018.08.19            

          **기고**
            - <a href="https://yozm.wishket.com/magazine/detail/2539" target="_blank" style="color: inherit;font-style: italic;">어제보다 1cm 더 성장하기 / 요즘 IT(커리어 리팩토링: 개발자의 성장법)</a> - 2024.04.11
            - <a href="https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000005037115" target="_blank" style="color: inherit;font-style: italic;">readItzine 5호, 개발자의 일 / 교보문고</a> - 2022.08.15
            - <a href="https://careerly.co.kr/profiles/105233" target="_blank" style="color: inherit;font-style: italic;">커리어리 큐레이션</a> - 2022.03.27 ~
            - <a href="https://blog.naver.com/naver_diary/222110224274" target="_blank" style="color: inherit;font-style: italic;">네이버 공식 다이어리 : [네피셜] 내가 개발한 코드 한 줄로 전 세계 팬들이 행복할 수 있다면!</a> - 2020.10.08
            - <a href="https://d2.naver.com/helloworld/3585246" target="_blank" style="color: inherit;font-style: italic;">네이버 D2 - helloworld : 내 서버에는 누가 들어오는 걸까</a> - 2018.04.30

          **서평**
            - <a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9791140700288" target="_blank" style="color: inherit;font-style: italic;">이펙티브 엔지니어 / 이미령 옮김</a> - 2022.07.01
            - <a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9791165920500" target="_blank" style="color: inherit;font-style: italic;">나만의 데이터 분석 플랫폼 엘라스틱 서치 / 주정남 지음</a> - 2021.03.26
            - <a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?barcode=9791160509519" target="_blank" style="color: inherit;font-style: italic;">심플 소프트웨어 / 이미령 옮김</a> - 2019.10.23
            
          **기타**
            - 네이버 2022 신입사원 대상 사내 특강, '그런 개발자로 괜찮은가 (feat. 성장)' - 2022.11.30
            - 네이버 2021 신입사원 멘토링 참여, <a href="https://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=018&aid=0004836785" target="_blank" style="color: inherit;font-style: italic;">인터뷰 기사</a> - 2021.01.25

  - title: Skill.
    layout: text # Type of content section (list/text)
    content: |
      - Language : Java, Kotlin
      - Framework : Spring (Boot, Batch, Core)
      - ORM : Mybatis, Spring Data JDBC
      - Database : MySql, MongoDB, Redis, Elasticsearch
      - Message Queue : Kafka
      - Build automation tool : Maven, Gradle
      - Web Server : Apache, Nginx, Tomcat
      - DevOps : CI/CD, Jenkins, Ansible, Github Actions
      - Container : Docker, Kubernetes
      - Pinpoint, nGrinder
      - Monitoring : ELK, Prometheus, Grafana

# Footer
footer_show_references: false
# references_title: References on request (Override references text)

# Build settings
# theme: modern-resume-theme (Use this is you are hosting your resume yourself)
# remote_theme: sproogen/modern-resume-theme (Use this if you are hosting your resume on GitHub)

sass:
  sass_dir: _sass
  style: compressed

plugins:
 - jekyll-seo-tag

exclude : [
  "Gemfile",
  "Gemfile.lock",
  "node_modules",
  "vendor/bundle/",
  "vendor/cache/",
  "vendor/gems/",
  "vendor/ruby/",
  "lib/",
  "scripts/",
  "docker-compose.yml",
  ]
